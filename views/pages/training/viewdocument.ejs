<!-- Enhanced Document Viewer Page for PDF files -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf_viewer.css">

<style>
  .pdf-container {
    width: 100%;
    height: calc(100vh - 150px);
    min-height: 600px;
    display: flex;
    flex-direction: column;
    border-radius: 8px;
    overflow: hidden;
    border: 1px solid rgba(0, 0, 0, 0.1);
  }
  
  .pdf-toolbar {
    background-color: #f8fafc;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    padding: 0.5rem 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .pdf-viewer {
    flex: 1;
    overflow: auto;
    background-color: #f0f0f0;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .document-info {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }
  
  .pdf-controls button {
    background-color: white;
    border: 1px solid rgba(0, 0, 0, 0.1);
    border-radius: 4px;
    padding: 0.25rem 0.75rem;
    margin: 0 0.125rem;
    font-size: 0.875rem;
    transition: all 0.2s;
  }
  
  .pdf-controls button:hover {
    background-color: #f1f5f9;
  }
  
  .pdf-controls button:active {
    background-color: #e2e8f0;
  }
  
  .pdf-page-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .pdf-page-input {
    width: 3rem;
    padding: 0.25rem;
    border-radius: 4px;
    border: 1px solid rgba(0, 0, 0, 0.1);
    text-align: center;
  }
  
  .pdf-page-count {
    color: #64748b;
    font-size: 0.875rem;
  }
  
  .pdf-zoom-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .pdf-canvas {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin: 1rem 0;
  }
  
  .document-metadata {
    border-top: 1px solid #e2e8f0;
    padding-top: 1rem;
    margin-top: 1rem;
    font-size: 0.875rem;
    color: #64748b;
  }
  
  .document-metadata div {
    margin-bottom: 0.5rem;
  }
  
  .related-documents {
    margin-top: 2rem;
  }
  
  .document-sidebar-item {
    transition: background-color 0.2s ease;
  }
  
  .document-sidebar-item:hover {
    background-color: rgba(0, 0, 0, 0.03);
  }
  
  .document-sidebar-item.active {
    background-color: rgba(var(--color-primary-rgb), 0.1);
    border-right: 3px solid var(--color-primary);
  }
  
  .document-thumbnail {
    position: relative;
    overflow: hidden;
    border-radius: 4px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  @media (max-width: 768px) {
    .pdf-zoom-controls {
      display: none;
    }
    
    .pdf-toolbar {
      flex-wrap: wrap;
    }
    
    .pdf-page-controls {
      margin-bottom: 0.5rem;
    }
  }
</style>

<div class="container mx-auto px-4 py-8">
  <!-- Navigation bar -->
  <div class="bg-white shadow-md rounded-lg p-4 mb-6 flex justify-between items-center">
    <div class="flex items-center gap-4">
      <a href="/training" class="text-primary hover:text-primary-600">
        <i class="fas fa-arrow-right ml-1"></i>
        العودة إلى المواد التدريبية
      </a>
      <h1 class="text-lg font-bold text-gray-800">
        <i class="fas fa-file-pdf ml-2 text-red-500"></i>
        عارض المستندات
      </h1>
    </div>
    <div class="flex items-center gap-3">
      <a href="/training/type/document" class="text-gray-600 hover:text-primary">
        <i class="fas fa-th-list"></i>
      </a>
      <button id="favorite-btn" class="text-gray-600 hover:text-primary">
        <i class="far fa-bookmark"></i>
      </button>
      <a href="#" id="download-document" class="text-gray-600 hover:text-primary">
        <i class="fas fa-download"></i>
      </a>
    </div>
  </div>
  
  <%
    // Define safe variables if not provided by the controller
    let documentMaterial = null;
    if (typeof material !== 'undefined') {
      documentMaterial = material;
    }
    
    // Default PDF URL (in case it's missing)
    const defaultPdfUrl = "/samples/sample.pdf";
    const pdfUrl = documentMaterial && documentMaterial.document_url ? documentMaterial.document_url : defaultPdfUrl;
    
    // Document metadata
    const title = documentMaterial ? documentMaterial.title : "عارض المستندات";
    const description = documentMaterial ? documentMaterial.description : "";
    const createdAt = documentMaterial && documentMaterial.created_at ? new Date(documentMaterial.created_at).toLocaleDateString('ar-SA') : "";
    const author = documentMaterial && documentMaterial.author ? documentMaterial.author : "";
    const tags = documentMaterial && documentMaterial.tags ? documentMaterial.tags : [];
    
    // Define safe related documents variable
    let relatedDocuments = [];
    if (typeof related !== 'undefined' && Array.isArray(related)) {
      relatedDocuments = related;
    }
    
    // Document ID for progress tracking
    const documentId = documentMaterial ? documentMaterial.id : "default";
  %>
  
  <div class="grid grid-cols-1 gap-6">
    <!-- PDF Viewer (main content) -->
    <div class="">
      <% if (documentMaterial) { %>
        <div class="pdf-container">
          <div class="pdf-toolbar">
            <div class="pdf-page-controls">
              <button id="prev-page" class="text-gray-600 hover:text-gray-800">
                <i class="fas fa-arrow-left"></i>
              </button>
              
              <div class="flex items-center">
                <input type="number" id="current-page" class="pdf-page-input" value="1" min="1" />
                <span class="pdf-page-count mr-2">/ <span id="total-pages">1</span></span>
              </div>
              
              <button id="next-page" class="text-gray-600 hover:text-gray-800">
                <i class="fas fa-arrow-right"></i>
              </button>
            </div>
            
            <div class="pdf-zoom-controls">
              <button id="zoom-out" class="text-gray-600 hover:text-gray-800">
                <i class="fas fa-search-minus"></i>
              </button>
              
              <span id="zoom-level" class="text-sm text-gray-600">100%</span>
              
              <button id="zoom-in" class="text-gray-600 hover:text-gray-800">
                <i class="fas fa-search-plus"></i>
              </button>
            </div>
          </div>
          
          <div class="pdf-viewer">
            <div id="pdf-render-target"></div>
          </div>
        </div>
      <% } else { %>
        <!-- Fallback when no document is provided -->
        <div class="bg-red-100 p-6 rounded-lg shadow-md text-center">
          <div class="text-5xl text-red-300 mb-4"><i class="fas fa-exclamation-circle"></i></div>
          <p class="text-red-600 text-lg mb-2">عذراً، المستند غير متوفر!</p>
          <p class="text-red-500 mb-4">لم نتمكن من العثور على المستند المطلوب.</p>
          <a href="/training" class="btn btn-primary">العودة إلى المواد التدريبية</a>
        </div>
      <% } %>
    </div>
  
  </div>
</div>

<!-- PDF.js library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Set worker path to pdf.js worker
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf.worker.min.js';
    
    // Get document URL
    const pdfUrl = '<%= pdfUrl %>';
    const documentId = '<%= documentId %>';
    
    // Get DOM elements
    const pdfRenderTarget = document.getElementById('pdf-render-target');
    const prevPageButton = document.getElementById('prev-page');
    const nextPageButton = document.getElementById('next-page');
    const currentPageInput = document.getElementById('current-page');
    const totalPagesSpan = document.getElementById('total-pages');
    const zoomInButton = document.getElementById('zoom-in');
    const zoomOutButton = document.getElementById('zoom-out');
    const zoomLevelSpan = document.getElementById('zoom-level');
    const downloadButton = document.getElementById('download-document');
    const favoriteButton = document.getElementById('favorite-btn');
    
    // PDF.js variables
    let pdfDoc = null;
    let pageNum = 1;
    let pageRendering = false;
    let pageNumPending = null;
    let scale = 1.0;
    
    // Storage key for remembering last page viewed
    const storageKey = `document_page_${documentId}`;
    
    /**
     * Get page info from document, resize canvas accordingly, and render page.
     * @param num Page number.
     */
    function renderPage(num) {
      pageRendering = true;
      
      // Remove any existing canvas
      while (pdfRenderTarget.firstChild) {
        pdfRenderTarget.removeChild(pdfRenderTarget.firstChild);
      }
      
      // Create a new canvas for this page
      const canvas = document.createElement('canvas');
      canvas.className = 'pdf-canvas';
      pdfRenderTarget.appendChild(canvas);
      
      const ctx = canvas.getContext('2d');
      
      // Using promise to fetch the page
      pdfDoc.getPage(num).then(function(page) {
        const viewport = page.getViewport({ scale: scale });
        canvas.height = viewport.height;
        canvas.width = viewport.width;
        
        // Render PDF page into canvas context
        const renderContext = {
          canvasContext: ctx,
          viewport: viewport
        };
        
        const renderTask = page.render(renderContext);
        
        // Wait for rendering to finish
        renderTask.promise.then(function() {
          pageRendering = false;
          
          // Save current page to localStorage
          localStorage.setItem(storageKey, pageNum);
          
          if (pageNumPending !== null) {
            // New page rendering is pending
            renderPage(pageNumPending);
            pageNumPending = null;
          }
        });
      });
      
      // Update page counters
      currentPageInput.value = num;
    }
    
    /**
     * If another page rendering in progress, waits until the rendering is
     * finished. Otherwise, executes rendering immediately.
     */
    function queueRenderPage(num) {
      if (pageRendering) {
        pageNumPending = num;
      } else {
        renderPage(num);
      }
    }
    
    /**
     * Displays previous page.
     */
    function onPrevPage() {
      if (pageNum <= 1) {
        return;
      }
      pageNum--;
      queueRenderPage(pageNum);
    }
    
    /**
     * Displays next page.
     */
    function onNextPage() {
      if (pageNum >= pdfDoc.numPages) {
        return;
      }
      pageNum++;
      queueRenderPage(pageNum);
    }
    
    /**
     * Zoom in the PDF
     */
    function zoomIn() {
      scale += 0.25;
      if (scale > 3) scale = 3;
      zoomLevelSpan.textContent = `${Math.round(scale * 100)}%`;
      queueRenderPage(pageNum);
    }
    
    /**
     * Zoom out the PDF
     */
    function zoomOut() {
      scale -= 0.25;
      if (scale < 0.5) scale = 0.5;
      zoomLevelSpan.textContent = `${Math.round(scale * 100)}%`;
      queueRenderPage(pageNum);
    }
    
    /**
     * Handle page input change
     */
    function onPageInputChange() {
      const newPageNum = parseInt(currentPageInput.value);
      if (newPageNum >= 1 && newPageNum <= pdfDoc.numPages) {
        pageNum = newPageNum;
        queueRenderPage(pageNum);
      } else {
        currentPageInput.value = pageNum;
      }
    }
    
    // Event listeners
    prevPageButton.addEventListener('click', onPrevPage);
    nextPageButton.addEventListener('click', onNextPage);
    currentPageInput.addEventListener('change', onPageInputChange);
    zoomInButton.addEventListener('click', zoomIn);
    zoomOutButton.addEventListener('click', zoomOut);
    
    // Download button
    downloadButton.addEventListener('click', function(e) {
      e.preventDefault();
      window.open(pdfUrl, '_blank');
    });
    
    // Favorite button
    favoriteButton.addEventListener('click', function() {
      const icon = this.querySelector('i');
      if (icon.classList.contains('far')) {
        icon.classList.remove('far');
        icon.classList.add('fas');
        icon.style.color = 'var(--color-primary)';
        // Here you would add code to save this to favorites
      } else {
        icon.classList.remove('fas');
        icon.classList.add('far');
        icon.style.color = '';
        // Here you would add code to remove from favorites
      }
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', function(e) {
      if (e.key === 'ArrowLeft') {
        onNextPage(); // Right-to-left language, so left arrow goes forward
      } else if (e.key === 'ArrowRight') {
        onPrevPage(); // Right-to-left language, so right arrow goes backward
      }
    });
    
    // Load the PDF
    pdfjsLib.getDocument(pdfUrl).promise.then(function(pdf) {
      pdfDoc = pdf;
      totalPagesSpan.textContent = pdf.numPages;
      
      // Check if we have a saved page number
      const savedPage = localStorage.getItem(storageKey);
      if (savedPage) {
        const parsedPage = parseInt(savedPage);
        if (parsedPage >= 1 && parsedPage <= pdf.numPages) {
          pageNum = parsedPage;
          
          // Show resume notification
          const notification = document.createElement('div');
          notification.style.position = 'fixed';
          notification.style.top = '20px';
          notification.style.right = '20px';
          notification.style.backgroundColor = 'rgba(var(--color-primary-rgb), 0.9)';
          notification.style.color = 'white';
          notification.style.padding = '10px 15px';
          notification.style.borderRadius = '4px';
          notification.style.zIndex = '1000';
          notification.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
          notification.textContent = 'تم استئناف القراءة من حيث توقفت';
          document.body.appendChild(notification);
          
          // Remove notification after 3 seconds
          setTimeout(() => {
            document.body.removeChild(notification);
          }, 3000);
        }
      }
      
      // Initial page rendering
      renderPage(pageNum);
    }).catch(function(error) {
      console.error('Error loading PDF:', error);
      
      // Show error message
      pdfRenderTarget.innerHTML = `
        <div class="p-6 text-center">
          <div class="text-5xl text-red-300 mb-4"><i class="fas fa-exclamation-circle"></i></div>
          <p class="text-red-600 text-lg mb-2">عذراً، تعذر تحميل المستند!</p>
          <p class="text-red-500 mb-4">${error.message}</p>
        </div>
      `;
    });
  });
</script>
