<!-- Enhanced Video Player Page for individual videos -->
<%
  // Define safe variables if not provided by the controller
  let videoMaterial = null;
  if (typeof material !== 'undefined') {
    videoMaterial = material;
  }
  
  // Default video URL (in case it's missing)
  const defaultVideoUrl = "https://vjs.zencdn.net/v/oceans.mp4";
  
  // Check for YouTube URL in either content or file_url fields
  let videoUrl = defaultVideoUrl;
  let isYouTubeVideo = false;
  let youTubeEmbedUrl = null;
  
  if (videoMaterial) {
    // Check content field first
    if (videoMaterial.content && (videoMaterial.content.includes('youtube.com') || videoMaterial.content.includes('youtu.be'))) {
      isYouTubeVideo = true;
      youTubeEmbedUrl = videoMaterial.content;
      console.log('Using YouTube URL from content field:', youTubeEmbedUrl);
    } 
    // Then check file_url
    else if (videoMaterial.file_url && (videoMaterial.file_url.includes('youtube.com') || videoMaterial.file_url.includes('youtu.be'))) {
      isYouTubeVideo = true;
      youTubeEmbedUrl = videoMaterial.file_url;
      console.log('Using YouTube URL from file_url field:', youTubeEmbedUrl);
    }
    // If it's not YouTube, try to use file_url as the video source
    else if (videoMaterial.file_url) {
      videoUrl = videoMaterial.file_url;
      console.log('Using regular video URL from file_url:', videoUrl);
    }
  }
  
  // Video poster/thumbnail
  const posterUrl = videoMaterial && videoMaterial.thumbnail_url ? videoMaterial.thumbnail_url : "";
  
  // Video metadata
  const title = videoMaterial ? videoMaterial.title : "عارض الفيديو";
  const description = videoMaterial ? videoMaterial.description : "";
  const duration = videoMaterial && videoMaterial.duration ? videoMaterial.duration : "";
  const createdAt = videoMaterial && videoMaterial.created_at ? new Date(videoMaterial.created_at).toLocaleDateString('ar-SA') : "";
  const author = videoMaterial && videoMaterial.author ? videoMaterial.author : "";
  
  // Define safe related videos variable
  let relatedVideos = [];
  if (typeof related !== 'undefined' && Array.isArray(related)) {
    relatedVideos = related;
  }
  
  // Video ID for progress tracking
  const videoId = videoMaterial ? videoMaterial.id : "default";
%>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<link href="https://vjs.zencdn.net/7.20.3/video-js.css" rel="stylesheet" />

<style>
  .video-container {
    border-radius: 8px;
    overflow: hidden;
    background-color: #000;
    position: relative;
  }
  
  .video-js {
    width: 100%;
    height: 0;
    padding-top: 56.25%; /* 16:9 Aspect Ratio */
  }
  
  .video-js .vjs-tech {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .video-js .vjs-big-play-button {
    background-color: rgba(var(--color-primary-rgb), 0.7);
    border-radius: 50%;
    width: 80px;
    height: 80px;
    line-height: 80px;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border: none;
  }
  
  .video-js .vjs-big-play-button .vjs-icon-placeholder:before {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-40%, -50%);
  }
  
  .video-js:hover .vjs-big-play-button,
  .video-js .vjs-big-play-button:focus {
    background-color: rgba(var(--color-primary-rgb), 0.9);
  }
  
  .video-js .vjs-control-bar {
    background-color: rgba(0, 0, 0, 0.7);
  }
  
  .video-js .vjs-play-progress {
    background-color: rgba(var(--color-primary-rgb), 1);
  }
  
  .video-js .vjs-volume-level {
    background-color: rgba(var(--color-primary-rgb), 1);
  }
  
  .navbar {
    background-color: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }
  
  .video-thumbnail {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
  }
  
  .video-thumbnail img {
    transition: transform 0.3s ease;
  }
  
  .video-thumbnail:hover img {
    transform: scale(1.05);
  }
  
  .play-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .video-thumbnail:hover .play-overlay {
    opacity: 1;
  }
  
  .play-btn {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    background-color: rgba(var(--color-primary-rgb), 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
  }
  
  .video-duration {
    position: absolute;
    bottom: 10px;
    right: 10px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 2px 8px;
    border-radius: 4px;
    font-size: 12px;
  }
  
  .video-sidebar-item {
    transition: background-color 0.2s ease;
  }
  
  .video-sidebar-item:hover {
    background-color: rgba(0, 0, 0, 0.03);
  }
  
  .video-sidebar-item.active {
    background-color: rgba(var(--color-primary-rgb), 0.1);
    border-right: 3px solid var(--color-primary);
  }
</style>

<div class="w-full" id="video-container" data-is-youtube="<%= isYouTubeVideo ? 'true' : 'false' %>">
  <!-- Top Navigation Bar -->
  <div class="navbar shadow-sm sticky top-0 z-10 px-4 py-2 flex items-center justify-between">
    <div class="flex items-center gap-4">
      <a href="/training" class="text-primary hover:text-primary-600">
        <i class="fas fa-arrow-right ml-1"></i>
        العودة إلى المواد التدريبية
      </a>
      <h1 class="text-lg font-bold text-gray-800 hidden md:block">
        <i class="fas fa-video ml-2 text-primary"></i>
        مشغل الفيديو
      </h1>
    </div>  
  </div>

  <%
    // All variable declarations have been moved to the top of the file
  %>

  <div class="container mx-auto px-4 py-6">
    <% if (videoMaterial) { %>
      <div class="grid grid-cols-1 gap-6">
        <!-- Main video player -->
        <div class="lg:col-span-3">
          
            <% if (isYouTubeVideo && youTubeEmbedUrl) { %>
              <!-- YouTube Embed Player -->
              <div class="responsive-iframe-container" style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
                <iframe 
                  id="youtube-player"
                  style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: 0;"
                  src="<%= youTubeEmbedUrl %>"
                  title="<%= title %>"
                  frameborder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                  allowfullscreen>
                </iframe>
              </div>
            <% } else { %>              
                
                  <video 
                    id="direct-video"
                    controls 
                    preload="auto"
                    poster="<%= posterUrl %>"
                    width="100%" 
                    height="auto"
                    class="w-full rounded overflow-hidden shadow-lg"
                  >
                    <source src="<%= videoUrl %>" type="video/mp4" />
                    Your browser does not support HTML5 video.
                  </video>
                
                          
            <% } %>         
        </div>        
      </div>
    <% } else { %>
      <!-- Fallback when no video is provided -->
      <div class="bg-red-100 p-6 rounded-lg shadow-md text-center">
        <div class="text-5xl text-red-300 mb-4"><i class="fas fa-exclamation-circle"></i></div>
        <p class="text-red-600 text-lg mb-2">عذراً، الفيديو غير متوفر!</p>
        <p class="text-red-500 mb-4">لم نتمكن من العثور على الفيديو المطلوب.</p>
        <a href="/training" class="btn btn-primary">العودة إلى المواد التدريبية</a>
      </div>
    <% } %>
  </div>
</div>

<!-- Video.js Script for regular videos -->
<% if (!isYouTubeVideo) { %>
<script src="https://vjs.zencdn.net/7.20.3/video.min.js"></script>
<% } %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get references to UI controls
    const fullscreenBtn = document.getElementById('fullscreen-btn');
    const favoriteBtn = document.getElementById('favorite-btn');
    
    // Get video type from data attribute (safer than direct EJS injection)
    const videoContainer = document.getElementById('video-container');
    const isYouTube = videoContainer.getAttribute('data-is-youtube') === 'true';
    let player;
    
    // Initialize regular video player if not YouTube
    if (!isYouTube) {
      // Make sure Video.js is loaded
      if (typeof videojs === 'undefined') {
        console.error('Video.js is not loaded properly');
      } else {
        // Enable additional debugging
        videojs.log.level('debug');
        
        // Try to load the player with more explicit options
        try {
          player = videojs('my-video', {
            controls: true,
            autoplay: false,
            preload: 'auto',
            fluid: true,
            techOrder: ['html5', 'flash'],
            sources: [{
              src: '<%- videoUrl %>', // Use raw output to avoid escaping
              type: 'video/mp4'
            }],
            controlBar: {
              children: [
                'playToggle',
                'volumePanel',
                'currentTimeDisplay',
                'timeDivider',
                'durationDisplay',
                'progressControl',
                'fullscreenToggle'
              ]
            }
          }, function onPlayerReady() {
            console.log('Video.js player is ready');
            
            // Show the video URL in the debug info
            const debugInfo = document.querySelector('.mt-2.text-xs.text-gray-500');
            if (debugInfo) {
              debugInfo.style.display = 'block';
            }
            
            // Log the video URL being used
            console.log('Player source:', this.currentSrc());
          });
        } catch (e) {
          console.error('Error initializing video player:', e);
        }
      }
      
      // Get video ID for progress tracking
      const videoId = document.querySelector('#my-video').dataset.videoId;
      const storageKey = `video_progress_${videoId}`;
      
      // Load saved progress if available
      const savedTime = localStorage.getItem(storageKey);
      if (savedTime) {
        // Set a flag to prevent saving during initial seeking
        let initialSeek = true;
        
        player.ready(function() {
          const seekTime = parseFloat(savedTime);
          if (!isNaN(seekTime) && seekTime > 0) {
            // Only resume if we're not at the end of the video
            if (player.duration() - seekTime > 10) {
              player.currentTime(seekTime);
              
              // Show resume notification
              const notification = document.createElement('div');
              notification.className = 'resume-notification';
              notification.innerHTML = `
                <div style="position: absolute; top: 10px; right: 10px; background: rgba(0,0,0,0.7); color: white; padding: 8px 12px; border-radius: 4px; z-index: 2;">
                  تم استئناف المشاهدة من حيث توقفت
                </div>
              `;
              player.el().appendChild(notification);
              
              // Remove notification after 3 seconds
              setTimeout(() => {
                if (notification.parentNode) {
                  notification.parentNode.removeChild(notification);
                }
              }, 3000);
            }
          }
          
          // Reset the flag after initial seek
          setTimeout(() => {
            initialSeek = false;
          }, 1000);
        });
        
        // Save progress periodically (every 5 seconds)
        player.on('timeupdate', function() {
          if (!initialSeek && !player.paused()) {
            const currentTime = player.currentTime();
            const duration = player.duration();
            
            // Only save if we're not at the very beginning or end
            if (currentTime > 1 && currentTime < (duration - 1)) {
              localStorage.setItem(storageKey, currentTime.toString());
            }
            
            // If we're near the end, clear the saved time to restart next time
            if (duration - currentTime < 10) {
              localStorage.removeItem(storageKey);
            }
          }
        });
      }
      
      // Handle fullscreen button for all video types
      if (fullscreenBtn) {
        fullscreenBtn.addEventListener('click', function() {
          // For Video.js player
          if (!isYouTube && player) {
            if (videojsContainer.style.display !== 'none') {
              // Video.js player is visible
              if (player.isFullscreen()) {
                player.exitFullscreen();
              } else {
                player.requestFullscreen();
              }
            } else {
              // Direct HTML5 player is visible
              const directVideo = document.getElementById('direct-video');
              if (directVideo) {
                // Use the proper fullscreen API
                if (document.fullscreenElement) {
                  document.exitFullscreen();
                } else {
                  directVideo.requestFullscreen().catch(err => {
                    console.error(`Error attempting to enable fullscreen: ${err.message}`);
                  });
                }
              }
            }
          } else if (isYouTube) {
            // For YouTube videos, try to call iframe API if available
            const iframe = document.querySelector('iframe');
            if (iframe) {
              const requestFullScreen = iframe.requestFullscreen || 
                                       iframe.mozRequestFullScreen || 
                                       iframe.webkitRequestFullScreen || 
                                       iframe.msRequestFullscreen;
              if (requestFullScreen) {
                requestFullScreen.call(iframe);
              }
            }
          }
        });
      }
    } else {
      // For YouTube videos, hide the fullscreen button as YouTube has its own controls
      if (fullscreenBtn) {
        fullscreenBtn.style.display = 'none';
      }
    }
    
    // Handle favorite button (works for both video types)
    if (favoriteBtn) {
      favoriteBtn.addEventListener('click', function() {
        const icon = this.querySelector('i');
        if (icon.classList.contains('far')) {
          icon.classList.remove('far');
          icon.classList.add('fas');
          icon.style.color = 'var(--color-primary)';
          // Here you would add code to save this to favorites
        } else {
          icon.classList.remove('fas');
          icon.classList.add('far');
          icon.style.color = '';
          // Here you would add code to remove from favorites
        }
      });
    }
    
    // Handle toggle between player types (only for regular videos)
    const togglePlayerBtn = document.getElementById('toggle-player');
    if (togglePlayerBtn && !isYouTube) {
      const videojsContainer = document.getElementById('videojs-container');
      const directPlayerContainer = document.getElementById('direct-player-container');
      
      togglePlayerBtn.addEventListener('click', function() {
        // If Video.js player is currently visible, switch to direct player
        if (videojsContainer.style.display !== 'none') {
          videojsContainer.style.display = 'none';
          directPlayerContainer.style.display = 'block';
          togglePlayerBtn.textContent = 'Switch to Advanced Player';
          
          // Try to play the direct player
          const directVideo = document.getElementById('direct-video');
          if (directVideo) {
            // Load the video again
            directVideo.load();
            
            // Try autoplay after a short delay
            setTimeout(() => {
              try {
                directVideo.play()
                  .catch(e => console.log('Autoplay not allowed:', e));
              } catch (e) {
                console.log('Error playing direct video:', e);
              }
            }, 500);
          }
          
          // Pause the Video.js player if it's playing
          if (player && typeof player.pause === 'function') {
            player.pause();
          }
        } else {
          // Switch back to Video.js player
          directPlayerContainer.style.display = 'none';
          videojsContainer.style.display = 'block';
          togglePlayerBtn.textContent = 'Switch Player Type';
          
          // Pause the direct player
          const directVideo = document.getElementById('direct-video');
          if (directVideo) {
            directVideo.pause();
          }
        }
      });
      
      // Automatically try the direct player if Video.js fails to play after 3 seconds
      setTimeout(() => {
        if (player && player.readyState() === 0) {
          console.log('Video.js player failed to load, switching to direct player');
          togglePlayerBtn.click();
        }
      }, 3000);
    }
  });
</script>
